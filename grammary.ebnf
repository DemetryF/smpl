stmt = if | while | function | declare | expr ';';

(* main statements *)

declare  = 'define' id [ '=' expr ] ';';
function = 'function' id '(' fargs ')' block;
if       = 'if' '(' expr ')' block [ 'else' block ];
while    = 'while' '(' expr ')' block;

return   = 'return' expr ';';
expr     = assignment;

(* blocks *)

block  = '{' { bstmt } '}';
bstmt  = if | while | declare | expr ';';
fblock = '{' { fstmt } '}';
fstmt  = bstmt | return;

(* expressions *)

assignment = 
      id '+=' or
    | id '-=' or
    | id '*=' or
    | id '/=' or
    | or;

or  = or '|' and
    | and;

and = and '&' eq
    | eq;

eq  = eq '!=' comp
    | eq '==' comp
    | comp;

comp =
      comp '>=' add
    | comp '>'  add
    | comp '<=' add
    | comp '<'  add
    | add;

add = add '+' mul
    | add '-' mul
    | mul;

mul = mul '*'  exp
    | mul '/'  exp
    | mul '%'  exp
    | mul '\\' exp
    | exp;

exp = unary '^' exp
    | unary;

unary = 
      '!' fact
    | '+' fact
    | '-' fact
    | fact;

fact = num | id | parenthesis | call;

parenthesis = '(' expr ')';
call = id '(' cargs ')';

(* arguments *)

fargs = [ id { ',' id } ];
cargs = [ expr { ',' expr }];