root = declaration*

(* declarations *)
declaration ::= constant | function

constant ::= 'const' id ':' ty '=' expr ';'
function ::= 'fn' id '(' fargs? ')' ('->' ty)? block

fargs ::= id (',' id)*

(* statements *)
stmt ::= if | while | declare | return | exprstmt

declare  ::= 'let' id ':' ty ('=' expr)? ';'
if       ::= 'if' expr block ('else' block)?
while    ::= 'while' expr block
return   ::= 'return' expr? ';'
break    ::= 'break' ';'
continue ::= 'continue' ';'
exprstmt ::= assignment ';'

(* block *)
block ::= '{' stmt* '}'

(* expressions *) 
expr ::= or

assignment ::= id '=' or
    | or

or ::= or '|' and
     | and

and ::= and '&' eq
      | eq

eq ::= eq '!=' comp
     | eq '==' comp
     | comp

comp ::=
      comp '>=' add
    | comp '>'  add
    | comp '<=' add
    | comp '<'  add
    | add

add ::= add '+' mul
      | add '-' mul
      | mul

mul ::= 
      mul '*'  unary
    | mul '/'  unary
    | unary

unary ::= 
      '!' fact
    | '-' fact
    | fact

fact ::= num | id | parenthesis | call

parenthesis ::= '(' expr ')'
call ::= id '(' cargs? ')'
cargs ::= expr (',' expr)*