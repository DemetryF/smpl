fn factorial(n) {
    let result = 1;
    let i = 1;

    while i <= n {
        result *= i; 
        i += 1;
    }

    return result;
}

fn fib(n) {
    if n == 1 | n == 2 {
        return 1;
    }

    return fib(n - 1) + fib(n - 2);
}

fn hypot(a, b) {
    return (a^2 + b^2)^0.5;
}

fn recursivefactorial(n) {
    if n == 1 {
        return 1;
    }
    return n * recursivefactorial(n - 1);
}